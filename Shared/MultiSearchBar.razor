@using System.Text.Json
@using Microsoft.Extensions.Localization
@using Console = System.Console

@using BootstrapBlazor.Components;
@using System.Diagnostics.CodeAnalysis
@using System.Xml.XPath
@using ArbitraryValues
@using Microsoft.AspNetCore.Components
@using SEP6_Blazor.Models


<div class="search-bar-main">
    <div class="search-bar-select">
        <div name="search-options" id="search-options" class="@borderRadiusLeftClass">
            <button @onclick="ToggleDropdown">
                <div class="dropdown">
                    <div>Filter...</div>
                </div>
            </button>
        </div>
    </div>
    <div class="search-bar-input">
        <input @bind-value="@keywordsData" @bind-value:event="oninput" @onkeydown="@Search" @onfocus="SetFocused" @onblur="SetUnfocused" type="text" placeholder="Keywords separated by commas (,)"/>
    </div>
    <div class="search-bar-button">
        <button type="submit" @onclick="SendQuery" class="@focusClass @borderRadiusRightClass">
            <img src="Assets/magnifying-glass.svg" alt="search-button-icon"/>
        </button>
    </div>
    <div class="dropdown-content @dropdownShownClass">
        <form class="dropdown-holder">
            @foreach (var item in filtersList)
            {
                <div class="dropdown-option">
                    <div class="dropdown-option-item dropdown-option-label">
                        @item.DisplayName
                    </div>
                    <div class="dropdown-option-item dropdown-option-input">
                        @switch (item.Type)
                        {
                            case "text":
                                <input @bind-value="@filtersList[item.Id].Value" @bind-value:event="oninput" type="text" placeholder="Add..."/>
                                break;
                            case "year":
                                <input @bind-value="@filtersList[item.Id].Value" @bind-value:event="oninput" type="number" min="1888" max="@DateTime.Now.Year" placeholder="Add..."/>
                                break;
                            case "rating":
                                <input @bind-value="@filtersList[item.Id].Value" @bind-value:event="oninput" type="number" min="0" max="5" step="0.1" placeholder="Add..."/>
                                break;
                            case "runtime":
                                <input @bind-value="@filtersList[item.Id].Value" @bind-value:event="oninput" type="number" min="0" max="5000" placeholder="Add..."/>
                                break;
                        }
                    </div>
                </div>
            }
            <div class="dropdown-option last-option dropdown-hint">* Multiple values supported. Must be sepparated by commas (,)</div>
        </form>
    </div>
</div>

@code
{
    private List<SearchFilterItem> filtersList { get; set; } = new List<SearchFilterItem>();
    //Keywords require extra query to get ID's
    private string? keywordsData { get; set; }

    private bool isFocused = false;
    private string? focusClass => isFocused ? "searchFocused" : null;

    private bool dropdownToggled = false;
    private string? dropdownShownClass => dropdownToggled ? "showDropdown" : null;
    private string? borderRadiusLeftClass => dropdownToggled ? "borderRadiusLeft" : null;
    private string? borderRadiusRightClass => dropdownToggled ? "borderRadiusRight" : null;

    private bool hasInformation = false;
    private string? showCheckClass => hasInformation ? "showCheck" : null;

    [Parameter]
    public Results Result { get; set; }

    [Parameter]
    public EventCallback<Results> ResultChanged { get; set; }

    private int i = 0;

    private int getId()
    {
        return i++;
    }

    protected override void OnInitialized()
    {
        filtersList.AddRange(new List<SearchFilterItem>
        {
            new("Movie Language", "language", getId()),
            new("Primary Release Year", "primary_release_year", "year", getId()),
            new("Minimum Average Rating", "vote_average.gte", "rating", getId()),
            new("Maximum Average Rating", "vote_average.lte", "rating", getId()),
            new("Minimum Runtime", "with_runtime.gte", "runtime", getId()),
            new("Maximum Runtime", "with_runtime.lte", "runtime", getId()),
    //Items below require extra queries to get ID's
            new("People*", "with_people", getId()),
            new("Genre*", "with_genre", getId()),
            new("Produced By*", "with_companies", getId()),
        });
    }

    private void ToggleDropdown()
    {
        dropdownToggled = !dropdownToggled;
    }

    private void SetFocused()
    {
        isFocused = true;
    }

    private void SetUnfocused()
    {
        isFocused = false;
    }

    //TODO: needs to be added in html
    private void ShowCheck()
    {
        hasInformation = true;
    }

    private async Task Search(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SendQuery();
        }
    }

    private async Task<Task> SendQuery()
    {
        Result = new Results();
        Result.ProductionResults = new List<Production>();
        return ResultChanged.InvokeAsync(Result);
    }
}