@using System.Text.Json
@using SEP6_Blazor.Data
@using SEP6_Blazor.Models

@inject IProductionService ProductionService;
@inject IActorService ActorService;

<div class="search-bar-main">
    <div class="search-bar-select">
        <div class="select-query-type @borderRadiusClass">
            <select @bind="@selectedQueryType" @onblur="SetNoBorder" @onclick="CalculateBorder" name="search-options" id="search-options">
                <option value="all">All</option>
                <option value="movies">Movies</option>
                <option value="tvseries">TV Series</option>
                <option value="actors">Actors</option>
                <option value="crew">Crew</option>
            </select>
        </div>
    </div>
    <div class="search-bar-input">
        <input @bind-value="@queryData" @bind-value:event="oninput" @onkeydown="@Search" @onfocus="SetFocused" @onblur="SetUnfocused" type="text" placeholder="Search..."/>
    </div>
    <div class="search-bar-button">
        <button type="submit" @onclick="SendQuery" class="@focusClass">
            <img src="Assets/magnifying-glass.svg" alt="search-button-icon"/>
        </button>
    </div>
</div>

@if (Result == null)
{
}
else if (Result.ProductionResults.Count == 0 && queryMade)
{
    <div class="no-results">
        <span>No relevant search results found.</span>
    </div>
}

@code
{
    private string? queryData { get; set; }
    private string selectedQueryType { get; set; } = "all";

    private bool isFocused = false;
    private string? focusClass => isFocused ? "searchFocused" : null;

    private bool isActive = false;
    private string? borderRadiusClass => isActive ? "borderRadius" : null;
    
    private bool queryMade { get; set; } 

    [Parameter] public Results Result { get; set; }
    [Parameter] public  List<Person> Actors { get; set; }
    [Parameter] public ComplexResult ComplexResult { get; set; }
    
    private Results TvResults { get; set; }

    [Parameter] public EventCallback<Results> ResultChanged { get; set; }
    [Parameter] public EventCallback<List<Person>> ActorsChanged { get; set; }
    [Parameter] public EventCallback<ComplexResult> ComplexResultChanged { get; set; }

    private void SetFocused()
    {
        isFocused = true;
    }

    private void SetUnfocused()
    {
        isFocused = false;
    }

    private void SetNoBorder()
    {
        isActive = false;
    }

    private void CalculateBorder()
    {
        isActive = !isActive;
    }

    private async Task Search(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
        {
            await SendQuery();
        }
    }

    private async Task<Task> SendQuery()
    {
        if (queryData is not "")
        {
            switch (selectedQueryType)
            {
                case "all":
                    Result = await ProductionService.SearchProduction(queryData,"movie");
                    TvResults = await ProductionService.SearchProduction(queryData, "tv");
                    Actors = await ActorService.SearchPerson(queryData);
                    ComplexResult.movieResults = Result;
                    ComplexResult.tvSeriesResult = TvResults;
                    ComplexResult.actorResuls = Actors;
                    return ComplexResultChanged.InvokeAsync(ComplexResult);
                case "movies":
                    Result = await ProductionService.SearchProduction(queryData, "movie");
                    return ResultChanged.InvokeAsync(Result);
                case "tvseries":
                    Result = await ProductionService.SearchProduction(queryData, "tv");
                    return ResultChanged.InvokeAsync(Result);
    //todo: implement this actors part
                case "actors":
                    Actors = await ActorService.SearchPerson(queryData);
                    return ActorsChanged.InvokeAsync(Actors);
            }
            queryMade = true;
        }
        return ResultChanged.InvokeAsync(Result);
    }
}