@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject SignOutSessionStateManager SignOutManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="navbar">
    <div class="nav-item">
        <a href="/MoviesPage" @onclick="() => ToggleIconSelection(0)">
            <figure class="icon-item @iconSelectedClass[0]">
                <img class="icon-item-img" src="Assets/film-slate.svg" alt="movies-menu-item"/>
                <figcaption class="icon-item-caption">Movies</figcaption>
            </figure>
        </a>
    </div>
    <div class="nav-item">
        <a href="/TVSeriesPage" @onclick="() => ToggleIconSelection(1)">
            <figure class="icon-item @iconSelectedClass[1]">
                <img class="icon-item-img" src="Assets/monitor-play.svg" alt="tv-series-menu-item"/>
                <figcaption class="icon-item-caption">TV Series</figcaption>
            </figure>
        </a>
    </div>
    <div class="nav-item">
        <a href="" @onclick="() => ToggleIconSelection(-1)">
            <figure class="icon-item">
                <img class="icon-item-logo" src="https://fontmeme.com/permalink/220512/38943b6258e84fbee1bab2ffbb7af0c2.png" alt="home-logo-menu-item">
            </figure>
        </a>
    </div>
    <AuthorizeView>
        <Authorizing>
            <div class="nav-item"></div>
        </Authorizing>
        <Authorized>
            <div class="nav-item">
                <a href="/ListsPage" @onclick="() => ToggleIconSelection(2)">
                    <figure class="icon-item @iconSelectedClass[2]">
                        <img class="icon-item-img" src="Assets/list.svg" alt="my-lists-menu-item"/>
                        <figcaption class="icon-item-caption">My Lists</figcaption>
                    </figure>
                </a>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item"></div>
        </NotAuthorized>
    </AuthorizeView>
    <AuthorizeView>
        <Authorizing>
            <div class="nav-item"></div>
        </Authorizing>
        <Authorized>
            <div class="nav-item nav-auth">
                <div class="dropdown">
                    <a>
                        <figure class="icon-item">
                            <img class="icon-item-img" src="Assets/user.svg" alt="profile-menu-item"/>
                            <figcaption class="icon-item-caption">Profile</figcaption>
                        </figure>
                    </a>
                    <div class="dropdown-content">
                        <span>@context.User.Identity.Name</span>
                        <hr/>
                        <a class="first-option" @onclick="() => ToggleIconSelection(-1)" href="/ContributionsPage">My Contributions</a>
                        <hr/>
                        <a href="#" @onclick="BeginSignOut" class="last-option">Log out</a>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="nav-item nav-auth">
                <a href="authentication/login">
                    <figure class="icon-item">
                        <img class="icon-item-img" src="Assets/user.svg" alt="profile-menu-item"/>
                        <figcaption class="icon-item-caption">Log In</figcaption>
                    </figure>
                </a>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private string[]? iconSelectedClass = new string[4];

    private void ToggleIconSelection(int value)
    {
        Array.Clear(iconSelectedClass, 0, iconSelectedClass.Length);
        switch (value)
        {
            case 0:
                iconSelectedClass[0] = "iconSelected";
                break;
            case 1:
                iconSelectedClass[1] = "iconSelected";
                break;
            case 2:
                iconSelectedClass[2] = "iconSelected";
                break;
        }
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

}