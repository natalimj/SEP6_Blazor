@page "/ListsPage"
@using SEP6_Blazor.Data
@using SEP6_Blazor.Models
@using BootstrapBlazor.Components
@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProductionService ProductionService
@inject IUserService UserService


<h3>My Lists</h3>
<div id="content">
    <div id="leftList">
        <ul class="list">
            @foreach (var result in @UserListResults)
            {
                <li @onclick="() => OnListSelected(result.Id)">@result.ListName</li>
            }
            <li @onclick="(() => ShowAddNewListModal())">Add new list</li>
        </ul>
    </div>
    <div id="rightItems">
        <div class="wrapper">
            @if (CurrentlyDisplayedMoviesList == null || CurrentlyDisplayedMoviesList.Count == 0)
            {
                <p>Select a list</p>
            }
            else
            {
                @foreach (var result in CurrentlyDisplayedMoviesList)
                {
                    <ProductionPosterItem result="result"/>
                }
            }
        </div>
    </div>
</div>


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    private List<UserList>? UserListResults { get; set; } = new List<UserList>();
    private List<Production>? CurrentlyDisplayedMoviesList { get; set; } = new List<Production>();
    private string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userId = await UserService.GetUserId(AuthenticationStateProvider);
        UserListResults = await UserService.GetUserLists(userId);
    }

    private async Task OnListSelected(string id)
    {
        CurrentlyDisplayedMoviesList = await UserService.GetProductionsInList(id);
    }

    private async Task ShowAddNewListModal()
    {
        var newListModal = Modal.Show<AddNewList>("New List");
        var result = await newListModal.Result;

        if (result.Cancelled)
        {
            System.Console.WriteLine("Modal was cancelled");
        }
        else
        {
            System.Console.WriteLine("Modal was closed");
            UserList callbackList = (UserList) result.Data;
            UserListResults = await UserService.GetUserLists(userId);
        }
    }
    }
}
